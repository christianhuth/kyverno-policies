apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  name: argo-cd-cluster-generation-from-capi
  annotations:
    policies.kyverno.io/title: Argo CD Cluster Secret Generation From CAPI Secret
    policies.kyverno.io/category: Argo CD
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Secret
    kyverno.io/kyverno-version: 1.7.1
    policies.kyverno.io/minversion: 1.7.0
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/description: >-
      This policy generates and synchronizes Argo CD cluster secrets from cluster.x-k8s.io/v1beta1/Cluster resources and their corresponding CAPI secrets.
spec:
  generateExisting: true
  rules:
    - name: source-non-local-cluster-and-capi-secret
      match:
        all:
          - resources:
              kinds:
              - cluster.x-k8s.io/v1beta1/Cluster
      exclude:
        resources:
          name: management-cluster
      context:
        - name: clusterName
          variable:
            value: "{{request.object.metadata.name}}"
            jmesPath: 'to_string(@)'
        - name: kubeconfigName
          variable:
            value: "{{ join('-', [clusterName, 'kubeconfig']) }}"
            jmesPath: 'to_string(@)'
        - name: extraLabels
          variable:
            value:
              argocd.argoproj.io/secret-type: cluster
              clusterId: "{{ clusterName }}"
        - name: metadataLabels
          variable:
            jmesPath: request.object.metadata.labels
            default: {}
        - name: metadataLabels
          variable:
            jmesPath: merge(metadataLabels, extraLabels)
        - name: kubeconfigData
          apiCall:
            urlPath: "/api/v1/namespaces/{{request.object.metadata.namespace}}/secrets/{{kubeconfigName}}"
            jmesPath: 'data.value'
        - name: serverName
          variable:
            value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).clusters[0].cluster.server }}"
            jmesPath: 'to_string(@)'
        - name: bearerToken
          variable:
            value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).users[0].user.token }}"
            jmesPath: 'to_string(@)'
        - name: caData
          variable:
            value: "{{ kubeconfigData | base64_decode(@) | parse_yaml(@).clusters[0].cluster.\"certificate-authority-data\" }}"
            jmesPath: 'to_string(@)'
        - name: dataConfig
          variable:
            value: |
              {
                "bearerToken": "{{ bearerToken }}",
                "tlsClientConfig": {
                  "insecure": false,
                  "caData": "{{ caData }}"
                }
              }
            jmesPath: 'to_string(@)'
    generate:
      synchronize: true
      apiVersion: v1
      kind: Secret
      name: "{{ clusterName }}"
      namespace: argo
      data:
        metadata:
          labels:
            "{{ metadataLabels }}"
        type: Opaque
        data:
          name: "{{ clusterName | base64_encode(@) }}"
          server: "{{ serverName | base64_encode(@) }}"
          config: "{{ dataConfig | base64_encode(@) }}"
